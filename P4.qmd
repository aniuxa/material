# Análisis descriptivo básico II

## Paquetes

```{r}
if (!require("pacman")) install.packages("pacman")#instala pacman si se requiere
pacman::p_load(tidyverse,
               readxl,
               writexl, 
               haven,
               sjlabelled, 
               janitor,
               ggpubr,
               magrittr,
               GGally,
               wesanderson,
               gt,
               gtsummary,
               srvyr
)
```


## Cargando los datos

Desde STATA
```{r}
ehpm_2019 <- read_dta("datos/ehpm_2019.dta", encoding="latin1") %>% 
  janitor::clean_names() # checa esto

```

Desde Excel:

```{r 3}
ejemploxl <- readxl::read_excel("datos/ejemplo_xlsx.xlsx", sheet = "para_importar")%>% 
  janitor::clean_names() # checa esto

```



## Visualización de datos, un pequeño disclaimer
Hay cursos específicos de visualización de datos. Es maravilloso pero también requiere que estudiemos bien qué tipo de datos tenemos y cuáles son nuestros objetivos. 

Me gusta mucho este recurso: <https://www.data-to-viz.com/>

##  Gráficos de base

"plot()" Es la función más simple. 

```{r}
  plot(as_label(ehpm_2019$pobreza))
```

Esto es igual que:

```{r}
barplot(table(as_label(ehpm_2019$pobreza)))
```

Histograma y el boxplot

```{r}
hist(ejemploxl$esperanza_de_vida)
```


```{r}
boxplot(ejemploxl$esperanza_de_vida)
```



## *Grammar of graphics: ggplot*

Hoy vamos a presentar a un gran paquete ¡Es de los famosos! Y tiene más de diez años.

* <https://qz.com/1007328/all-hail-ggplot2-the-code-powering-all-those-excellent-charts-is-10-years-old/>

"gg" proviene de "Grammar of Graphics", funciona un poco como sintácticamente, de ahí su nombre.

Algunos recursos para aprender ggplot

* <https://ggplot2-book.org/> hecha por el mero mero.

* <http://sape.inf.usi.ch/quick-reference/ggplot2> 

* <https://raw.githubusercontent.com/rstudio/cheatsheets/master/data-visualization-2.1.pdf>

Vamos a revisar una presentación que es muy interesante

* <https://evamaerey.github.io/ggplot2_grammar_guide/ggplot2_grammar_guide.html>

* <https://huygens.science.uva.nl/ggPlotteR/> Hace gráficos de ggplot con la base de datos de Gapminder

# Un lienzo para dibujar

Para hacer un gráfico, ggplot2 tiene el comando "ggplot()".  Hacer gráficos con esta función tiene una lógica  aditiva. Lo ideal es que iniciemos estableciendo el mapeo estético de nuestro gráfico, con el comando aes()

```{r}
g1<-ehpm_2019 %>%
  ggplot(aes(as_label(pobreza)))

g1 # imprime el lienzo
```



## Gráficos univariados

### Para cualitativas

```{r}
g1 + geom_bar()
```


```{r}
g1 +  geom_bar(aes(
  fill = as_label(pobreza)
  )) # colorea la geometría

# Esto es equivalente

ehpm_2019 %>%
  ggplot(aes(as_label(pobreza),
             fill = as_label(pobreza)
             )
         ) + geom_bar()

```

### Para variables cuantitativas
Podemos hacer histogramas y gráficos de densidad, de manera fácil. La idea es agregar en nuestro "lienzo" una geometría, un valor para dibujar en él. Esto se agrega con un "+" y con la figura que se añadirá a nuestro gráfico.

```{r}
g2<-ehpm_2019 %>%
  ggplot(aes(r106))

g2 # imprime el lienzo
```

#### Histograma
```{r}
g2 + geom_histogram() 
```

#### Densidad

```{r}
g2 + geom_density() 
```


## Intro a dos variables

Vamos a terminar con un código que resume mucho de lo que hemos visto hoy:

```{r}
ehpm_2019 %>% 
  filter(actpr2012==10) %>%  # nos qur106mos sólo con los ocupados
  select(r106, money, aproba1) %>% 
  GGally::ggpairs()
```


