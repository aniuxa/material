# Factores de expansión

## Paquetes

```{r}
if (!require("pacman")) install.packages("pacman")#instala pacman si se requiere
pacman::p_load(tidyverse,
               readxl,
               writexl, 
               haven,
               sjlabelled, 
               janitor,
               ggpubr,
               magrittr,
               GGally,
               wesanderson,
               gt,
               gtsummary,
               srvyr
)
```

## Cargando los datos

Desde STATA

```{r}
ehpm_2019 <- read_dta("datos/ehpm_2019.dta", encoding="latin1") %>% 
  janitor::clean_names() # checa esto

```

## La función tally

El comando "tabyl()" del paquete "janitor" es muy útil pero no es compatible con los factores del expansión. En realidad, tabyl() nos ahorra un poco el hecho de tener que agrupar nuestra base en categorías y luego hacer un conteo para cada una de ellas. "tally()" es un comando que nos hace ese conteo y "group_by" nos agrupa las observaciones de nuestra base de datos para hacer cualquier operación.

```{r}
ehpm_2019 %>% 
 group_by(as_label(r104)) %>% 
  tally(fac00) %>% #nombre del factor
  adorn_totals()  # Agrega total
```

Podemos usar funciones de tabyl

```{r}
ehpm_2019 %>% 
 group_by(as_label(r104)) %>% 
  tally(fac00) %>% #nombre del factor
  adorn_totals() %>% # Agrega total
  adorn_percentages("all")  %>% 
  adorn_pct_formatting()
```

## Otras formas

La función "count()" también permite dar pesos

```{r}
ehpm_2019 %>% 
  count(r104, pobreza,  wt = fac00) 

```

Es compatible con etiquetas

```{r}
ehpm_2019 %>% 
  count(as_label(r104), as_label(pobreza),  wt = fac00) 
```

Podemos mover un poquito con pivot_wider para que se vea más a lo que acostumbramos a una tabla de frecuencias

```{r}
ehpm_2019 %>% 
  mutate_at(vars(r104, pobreza), as_label) %>% 
  count(r104, pobreza,  wt = fac00) %>% 
  tidyr::pivot_wider(names_from = r104, 
              values_from = n)
```

```{r}
ehpm_2019 %>% 
  mutate_at(vars(r104, pobreza), as_label) %>% # otra forma de mutate y as_label
  count(r104, pobreza,  wt = fac00) %>% 
  pivot_wider(names_from = r104, 
              values_from = n) %>%
  adorn_totals() %>% # Agrega total
  adorn_percentages("col")  %>% 
  adorn_pct_formatting()
```

## Diseño complejo

Hay muchos diseños muestrales, asumiremos el diseño simple, pero hay que revisar la documentación de la base

```{r}
# Muestreo aleatorio
ags_srvy <- ehpm_2019 %>%
  as_survey_design(weights = fac00)

```

Si revisamos las encuestas tiene un diseño complejo, hay estratos y unidades primarias de muestreo

```{r}

# Muestreo estratificado
ags_srvy <- ehpm_2019 %>%
  as_survey_design(
    upm=correlativo,
    strata = estratoarea,
    weights = fac00,
    nest = TRUE)

```

Como vemos esto es un archivo bien grande, por lo que mejor vamos a seleccionar un par de variables:

```{r}
# simple random sample
ags_srvy <- ehpm_2019 %>%
  select(correlativo, estratoarea, fac00, actpr, actpr2012,
         r104, r106, aproba1, money, fac00) %>% 
  as_survey_design(
    upm=correlativo,
    strata = estratoarea,
    weights = fac00,
    nest = TRUE)

```

Para una media ponderada

```{r}
ags_srvy %>%
  filter(r106>14 & r106<99) %>% #filtro de r106d para tabulados
  filter(actpr2012==10) %>% # sólo ocupados
  filter(money>0) %>% # sólo con ingresos
  summarise(
    media_ponderada = survey_mean(money, na.rm=T))

```

Si queremos los intervalos de confianza (*spoiler*):

```{r}
ags_srvy %>%
  filter(r106>14 & r106<99) %>% #filtro de r106d para tabulados
  filter(actpr2012==10) %>% # sólo ocupados
  filter(money>0) %>% # sólo con ingresos
  summarize(
    media_ponderada = survey_mean(money,
                                  vartype = "ci") )

```

```{r}
ags_srvy %>%
  filter(r106>14 & r106<99) %>% #filtro de r106d para tabulados
  filter(actpr2012==10) %>% # sólo ocupados
  filter(money>0) %>% # sólo con ingresos
  summarize(
    mediana_ponderada = survey_median(money,
                                  vartype = "ci") )

```

```{r}
ags_srvy %>%
  mutate(r104=as_label(r104)) %>% 
  group_by(r104) %>% #variables cuali
  summarize(proportion = survey_mean(), # proporción
            total = survey_total() ) # totales
```

# Introducción a la regresión lineal

## La relación entre dos variables

En términos *mincerianos*, los ingresos estarían explicados por la escolaridad y la experiencia...

```{r}
ehpm_2019 %>% 
  filter(actpr2012==10) %>% 
  filter(money>0) %>% 
  filter(aproba1<99) %>% 
  ggplot() +
    aes(x=aproba1, y=log(money)) + 
  geom_point()

```

Cuando tenemos muchos casos es útil la opción "jitter"

```{r}
ehpm_2019 %>% 
  filter(actpr2012==10) %>% 
  filter(money>0) %>% 
  filter(aproba1<99) %>% 
  ggplot() +
    aes(x=aproba1, y=log(money)) + 
  geom_jitter()

```

También cambiar un poquito la transparencia...

```{r}
ehpm_2019 %>% 
  filter(actpr2012==10) %>% 
  filter(money>0) %>% 
  filter(aproba1<99) %>% 
  ggplot() +
    aes(x=aproba1, y=log(money), alpha=I(0.5)) + 
  geom_jitter()

```

¿Cómo se ve la línea MCO ajustada por estos elementos?

```{r}
ehpm_2019 %>% 
  filter(actpr2012==10) %>% 
  filter(money>0) %>% 
  filter(aproba1<99) %>% 
  ggplot() +
    aes(x=aproba1, y=log(money), alpha=I(0.5)) + 
  geom_jitter()+
  geom_smooth(method = lm)

```

¿cómo se ajusta esa línea?

```{r}
model<-ehpm_2019 %>% 
  filter(actpr2012==10) %>% 
  filter(money>0) %>% 
  filter(aproba1<99) %>% 
  with(
    lm(log(money)~ aproba1)
  )

model
```


Para ver esto más guapo:

```{r}
model %>%
   gtsummary::tbl_regression() 
  #%>% 
  # add_significance_stars() %>% 
  # add_n() %>% 
  # add_glance_table()

```

