# Análisis longitundinal: secuencias

## Paquetes

```{r}
if (!require("pacman")) install.packages("pacman") # instala pacman si se requiere
pacman::p_load(skimr,tidyverse, magrittr, # sobretodo para dplyr
              haven, readxl, #importación
              janitor, #tablas
              sjlabelled, # etiquetas
              TraMineR, WeightedCluster, wesanderson, remotes, gtable) # este es

```

mos a graficar las preferencias a lo largo de las ondas

```{r}

#remotes::install_github("erblast/easyalluvial") 
#suppressPackageStartupMessages(require(easyalluvial) )

library(easyalluvial) #carga la librería
```

## Datos

```{r}
panel_funda <- read_dta("datos/2021_11_01_Fundaungo.dta", encoding = "latin1") %>% clean_names()

```

Revisamos las rondas en esta base de datos

```{r}
names(panel_funda)
#skimr::skim(panel_funda)
```

Nos vamos a quedar con todas las ondas que empezaron en el mismo momento

```{r}
panel_funda %<>% 
  filter(!is.na(id)) 
  
```

Vamos a poner sufijos

```{r}
panel_funda %<>% rename_at(vars(se1:l1,pol2, nb2,id1), ~ paste0(., '_1'))

panel_funda %>% 
  dplyr::select(starts_with("se1")) # Revisamos

```

Vamos a quedarnos con un par de preguntas.

```{r}

panel_funda2 <- panel_funda %>% 
  filter(ronda<2) %>% 
  select(correlativo, id,  departamento, 
         se2_1,se2_2, se2_3, se2_4, se2_5,
         sit1_1, sit1_2, sit1_3, sit1_4, sit1_5,
         id1_1, id1_2, id1_3, id1_4, id1_5) 


```

Con estas variables ya haremos nuestra base para las secuencias, para eso es mejor tenerla long
```{r}

panel_long<-panel_funda2 %>% 
  pivot_longer(
    -c(correlativo, id, departamento), 
    names_to = c(".value", "onda"), 
    names_sep = "_",
    values_drop_na = TRUE
  ) 
```
Como pusimos el drop NA, vamos a tener paneles incompletos

```{r}
panel_long %<>% 
  group_by(id) %>% 
  add_tally(name="n_total") %>% # nos hace un total de observaciones
  ungroup()

tabyl(panel_long$n_total) # cuantas entrevistas por cada i
tabyl(panel_long$onda) # cuantos en cada onda

```
Nos quedamos con el panel completo

```{r}
panel_completo<- panel_long %>% filter(n_total==4) %>%  mutate(onda=as_numeric(onda))
```


## Grafico alluvial

Vamos a hacer un grafico aluvial para ver las diferencias en los diferentes momentos

```{r}

panel_alluvial<- panel_completo %>%
  select(c(id1, onda, id)) %>% #nos quedamos sólo con las variables de la secuencia, id y i,
  mutate(id1=as_label(id1)) %>% # para que entienda las categorías
  mutate(id=as_factor(id)) # cambia de numérico a factor

```

En id1, tenemos 12 valores, vamos a establecer una paleta de colores para cada valor.

```{r}
cols <- we
cols
```

```{r}
allu<-easyalluvial::alluvial_long(data=panel_alluvial, #seleción del objeto de base de datos
                    key = onda, # Variable que identifica los estados
                    value = id1, # Variable con la que estableceremos los cambios
                    id=id, # identificador único de los individuos
                    fill_by='value', # Define los flujos en términos de la variable declarada en "value"
                    col_vector_flow = cols, # Color para los flujos
                    col_vector_value = cols) # Color para los recuadros

allu  # lo imprime
```
Con etiqutas más pequeñas podría ser más interesante. Acá este gráfico ya nos dice que hay 343 trayectorias diferentes en nuestros datos.

## Paquete TraMineR
Este paquete es fundamental para el análisis de secuencias. Genera tanto análisis descriptivos, formas de agrupamiento de nuestras secuencias y medidas que analizan específicamente cómo se comportan estas secuencias. En esta sección nos vamos a concentrar en el análisis de secuencias de estado, tal como se describe en (Gabadinho, Ritschard, Müller, & Studer, 2011). 

```{r}
panel_wide <-panel_completo %>% 
  select(correlativo, id, departamento, starts_with("id1"), onda) %>% 
  pivot_wider(
    names_prefix = "id1_", 
    names_from = onda,
    values_from = c(starts_with("id1")))
```


Primero vamos a definir nuestra secuencia con el comando "seqdef()". Usaremos nuestra base en formato ancho. Este formato ancho es compatible con el formato "STate-Sequence (STS)" del paquete, es decir, los estatos sucesivos representan una posición o columna en nuestra base de datos. La definición de la sequencia la guardaremos  en un nuevo objeto.

```{r}

var_seq<-c("id1_1", "id1_2", "id1_3", "id1_4") # variables con las que se ejecutarán las secuencias

id1.shortlab<-c("0", "++ Arena", "+ Arena", "++ FMLN", "+FMLN", "++ GANA", "+ GANA",
                "++ NI", "+ NI", "Otro", "Independiente", "NS/NR")
```

## El programa central

Siguiendo programa central descrito por Cornwell(2015), elaboraremos los primeros cuatro pasos.  Pero primero necesitamos declarar la base para que el programa entienda que tenemos secuencias. 

```{r}

id1.seq <- panel_wide %>% 
  seqdef(
    var=var_seq, # variables en análisis
    states = id1.shortlab, #estados, preferimos usar etiquetas cortas
    xtstep = 1) #Número de marcas en el eje x para gráficas

```

### Paso 1:	
Descripción de las secuencias, mediante la tabulación y cálculo de indicadores para las características de cada secuencia;
 
```{r}


## Tabulado y medidas ----------------------------------------------------------
seqtab(id1.seq, #objeto de secuencia
       idxs=1:10) # establece el número de secuencias a tabular, si no se establece se tabulan todas

seqstatd(id1.seq) 
#Esta es una medida de entropía para cada uno de los estado



```
 
### Paso 2.
Visualización, a partir de los gráficos. En este caso presentamos gráficos de frecuencias y de índice, *segfplot y seqIplot*, respectivamente.
 
```{r}

# Gráfico de frecuencias
seqfplot(seqdata=id1.seq, # objeto de la definición de secuencias
         with.legend = "right", # posición de la leyenda
         border = NA, # opciones de bordes
         cpal=cols, #colores de nuestro vector
         xtlab=1:4) # Para etiquetar el eje x con el número de entrevistas


# Gráfico de índice
seqIplot(seqdata=id1.seq, # objeto de la definición de secuencias
         with.legend = "right", # posición de la leyenda
         border = NA, # opciones de bordes
         cpal=cols, #colores de nuestro vector
         sortv=id1.seq$id1_1,# ordenadas según la condición inicial
         xtlab=1:4) # Para etiquetar el eje x con el número de entrevistas

```
 
### Paso 3:
Comparación de las secuencias entre sí, utilizando las medidas de distancia obtenidas a través de una correspondencia óptima (OM);

```{r}

dist.om1 <- seqdist(id1.seq, # objeto con la secuencia declarada
                    method = "OM", # Cómo calculamos la disimilaridad
                    indel = 1, # costos de in-serción y eliminación (del-ete)
                    sm = "TRATE") # La mprobabilidades de transición de los datos son los costos

```

### Paso 4:

Agrupación de las secuencias similares, en este caso, utilizaremos el clúster jerárquico con el método de mínima varianza de Ward

```{r}

set.seed(123) # semilla para replicar y que nos dé a todes igual
clusterward1 <- agnes(dist.om1,# llamamos a nuestro objeto de distancia 
                      diss = TRUE, # para que entienda que le dimos un objeto de disimiliradid
                      method = "ward") #l método de varianza mínima de Ward.

plot(clusterward1, which.plot = 2) #grafica para decidir

cl1.3 <- cutree(clusterward1, k = 3) #corta los casos

cl1.3fac <- factor(cl1.3, 
                   labels = paste("Tipología", 1:3))


# ¿Cómo se ven  las secuencias por grupo?


seqIplot(id1.seq, # objeto con secuencias declaradas
         group = cl1.3fac, #identifica los cluster calculados
         sortv = "from.start",# ordena según condición inicial
         cpal=cols)


```

