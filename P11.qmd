---
title: "p11"
editor: visual
---

## Importación bases EHPM 2018

Vamos a trabajar con esta base que tiene elementos separados.

```{r}
if (!require("pacman")) install.packages("pacman") # instala pacman si se requiere
pacman::p_load(skimr,tidyverse, magrittr, # sobretodo para dplyr
              haven, readxl, #importación
              janitor, 
              sjlabelled) 
```

Hoy cargamos la versión seccionada de la base

```{r}

hogares <- haven::read_sav("datos/ehpm2018/HOGARES_EHPM 2018.sav")
personas<- haven::read_sav("datos/ehpm2018/PERSONA_EHPM 2018.sav")
gastos_a<- haven::read_sav("datos/ehpm2018/EHPM 2018 SEC 8 A.sav")
gastos_b<- haven::read_sav("datos/ehpm2018/EHPM 2018 SEC 8 B.sav")


```


## Juntando bases
Muchas bases de datos están organizadas en varias tablas. 
La ventaja de la programación por objetos de R, nos permite tener las bases cargadas en nuestro ambiente y llamarlas y juntarlas cuando sea necesario. 


```{r}
dim(hogares)
names(hogares[,1:15])
dim(personas)
names(personas[,1:15])


```

Para juntar bases usamos el comando "merge"

En "by" ponemos el id, correspondiente a la variable o variables que forman el id, entrecomillado. Cuando estamos mezclando bases del mismo nivel de análisis el id es igual en ambas bases. Cuando estamos incoporando información de bases de distinto nivel debemos escoger

En general ponemos el id de la base de mayor nivel. En este caso, sabemos que a una vivienda corresponde más de un hogar. Tal como revisamos nuestra documentación, sabemos que el id de la tabla hogares es "KEY_HOGAR"

```{r}
merge_data<- merge(hogares, personas, by="KEY_HOGAR")

```

Revisemos la base creada
```{r}
names(merge_data)
dim(merge_data)

```
¿Qué observas?

(1) El orden de las variables corresponde al orden que pusimos las bases en las opciones. 

(2) También vemos que las variables que se repetían en ambas bases se repiten en la nueva base, seguida de un un punto y una "x", para lo que proviene de la primera base y con una "y", lo que proviene de la segunda.
R dejará las variables intactas y son coincidentes, en nuestro caso, porque las variables son iguales. R hace esto para precaver que por error tengamos alguna variable con un nombre igual y no sea la misma

Revisemos que las variables "repetidas son iguales
```{r}
table(merge_data$region.x, merge_data$region.y)
```

Si nos molesta mucho esta repetición de comandos, pues colocar un argumento señalando cual de las dos variables es la "real", y eliminarlas de la base. Haremos un vector de nombres de variables que tienen .y para luego usar este vector para "deseleccionarlas"

```{r}

merge_data<-select(merge_data,-ends_with(".y"))

```


## Merge con id compuesto

La EHPM en ediciones más recientes tiene un id (o "key") ya establecido. Si trabajas co una versión más antigua no la tendra.

Hogares {hogares} es "lote", "tipo", "folio", "viv"
Persons {individuos} es "lote", "tipo", "folio", "viv", "r101"

Esto significa que tenemos un id compuesto. No es una sola variable. Para esto modificamos ligeramente cómo ponemos el "by", pero siempre eligiendo el id de la base de mayor nivel. (Tené cuidado con los paréntesis)

```{r}
merge_data2<- merge(hogares, personas, by=c("lote", "tipo", "folio", "viv"))
dim(merge_data2)
merge_data2<-select(merge_data2,-ends_with(".y"))
dim(merge_data2)

```

Revisemos la base
```{r}
str(merge_data2)
tail(merge_data2)
```

## Bases de distinto tamaño

Hasta ahorita hemos hecho merge que son de unidades de distinto nivel y son incluyentes. A veces tenemos bases de datos que son de distinto tamaño y del mismo nivel. A veces las dos aportan casos y a veces aportan variables, y a veces, las dos aportan las dos cosas. 

Vamos a revisar qué pasaría si quisiéramos incorporar la información de los hogares que han gastado en paquetes turísticos

```{r}
gastos_turis<-gastos_b %>% 
    filter(DESCRIPCION=="18. 096.Paquetes turísticos" & r808==1) 
dim(gastos_turis)

```

Vamos a hacer el primer tipo de merge

```{r}
merge_data3<-merge(hogares,gastos_turis, by=c("lote", "tipo", "folio", "viv"))
dim(merge_data3)
```
¡La base nueva no tiene a todas las observaciones, solo la que tiene en la base más pequeña! Tenemos sólo 221 hogares.

## Cuatro formas de hacer un fusionado

En realidad hay cuatro formas de hacer un "merge"

### Casos en ambas bases

Por *default*, el comando tiene activado la opción "all = FALSE", que nos deja los datos de ambas bases comunes. (tipo una intersección)
```{r}
merge_data3<-merge(hogares,gastos_turis, by=c("lote", "tipo", "folio", "viv"), all = F)
dim(merge_data3)
```

### Todos los casos

Si cambiamos la opción "all = TRUE", que nos deja los datos comunes a ambas bases. 
(como una unión)

```{r}
merge_data3<-merge(hogares,gastos_turis, by=c("lote", "tipo", "folio", "viv"), all = T)
dim(merge_data3)
```

### Casos en la base 1

Si queremos quedarnos con todos los datos que hay en la primera base, x, vamos a usar a opción all.x = TRUE.

```{r}
merge_data3<-merge(hogares,gastos_turis, by=c("lote", "tipo", "folio", "viv"), all.x  = TRUE)
dim(merge_data3)
```

### Casos de la base 2

Notamos que hoy sí tenemos los datos de toda la población y hay missings en las variables aportadas por la base de trabajo

Si queremos lo contrario, quedarnos con los datos aportados por la segunda base, y, vamos a usar la opción all.y=TRUE


```{r}
merge_data3<-merge(hogares,gastos_turis, by=c("lote", "tipo", "folio", "viv"), all.y  = TRUE)
dim(merge_data3)
```

Esta imagen te puede ser utilidad:
![image](merge.png)

(tomada de aquí <https://www.dummies.com/programming/r/how-to-use-the-merge-function-with-data-sets-in-r/>)